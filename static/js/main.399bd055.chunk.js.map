{"version":3,"sources":["data.js","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["data","letter","letterCode","sound","sampleURL","DrumPad","clickEvent","id","map","x","className","onClick","key","src","App","useState","text","setText","keyPressHandler","e","keyPressed","String","fromCharCode","keyCode","audio","document","getElementById","play","parentElement","padPressed","classList","add","setTimeout","remove","useEffect","addEventListener","removeEventListener","role","aria-label","target","targetButton","firstChild","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPA0DiBA,EA1DJ,CACT,CACEC,OAAQ,IACRC,WAAY,GACZC,MAAO,cACPC,UAAW,iEAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,aACPC,UAAW,gEAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,QACPC,UAAW,2DAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,OACPC,UAAW,4DAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,UACPC,UAAW,0DAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,YACPC,UAAW,0DAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,SACPC,UACE,mEAEJ,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,cACPC,UAAW,2DAEb,CACEH,OAAQ,IACRC,WAAY,GACZC,MAAO,QACPC,UAAW,6CCnCAC,EAfD,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACf,OACE,yBAAKC,GAAG,sBACLP,EAAKQ,KAAI,SAACC,GACT,OACE,4BAAQC,UAAU,WAAWH,GAAIE,EAAEN,MAAOQ,QAASL,EAAYM,IAAKH,EAAEN,OACpE,2BAAOO,UAAU,OAAOH,GAAIE,EAAER,OAAQY,IAAKJ,EAAEL,YAC7C,wBAAIG,GAAG,iBAAiBE,EAAER,cCuDzBa,G,MA9DH,WAAM,MAEQC,mBAAS,iBAFjB,mBAETC,EAFS,KAEHC,EAFG,KAKVC,EAAkB,SAACC,GACvB,IAAIC,EAAaC,OAAOC,aAAaH,EAAEI,SACnCC,EAAQC,SAASC,eAAeN,GACpC,GAAc,OAAVI,EAAJ,CAIEA,EAAMG,OAGR,IAAIxB,EAAQqB,EAAMI,cAAcrB,GAChCU,EAAQd,GACR,IAAI0B,EAAaL,EAAMI,cACvBC,EAAWC,UAAUC,IAAI,UACzBC,YAAW,WACTH,EAAWC,UAAUG,OAAO,YAC3B,OAILC,qBAAU,WAER,OADAT,SAASU,iBAAiB,UAAWjB,GAC9B,WACLO,SAASW,oBAAoB,UAAWlB,MAEzC,IAiBH,OACE,yBAAKX,GAAG,aACN,yBAAKA,GAAG,gBACN,wBAAIA,GAAG,WACL,0BAAM8B,KAAK,MAAMC,aAAW,cAA5B,gBADF,eACgE,0BAAMD,KAAK,MAAMC,aAAW,cAA5B,iBAEhE,yBAAK/B,GAAG,WACN,wBAAIA,GAAG,QAAQS,IAEjB,kBAAC,EAAD,CAASV,WAvBK,SAACa,GACnB,IAAIZ,EAAKY,EAAEoB,OAAOhC,GACdiC,EAAef,SAASC,eAAenB,GAC3C,GAAqB,OAAjBiC,EAAJ,CAGYA,EAAaC,WAEjBd,OAGRV,EAAQV,WCpCQmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.399bd055.chunk.js","sourcesContent":["const data = [\n    {\n      letter: \"Q\",\n      letterCode: 81,\n      sound: \"Punchy-Kick\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\n    },\n    {\n      letter: \"W\",\n      letterCode: 87,\n      sound: \"Side-Stick\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n    },\n    {\n      letter: \"E\",\n      letterCode: 69,\n      sound: \"Snare\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n    },\n    {\n      letter: \"A\",\n      letterCode: 65,\n      sound: \"Clap\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n    },\n    {\n      letter: \"S\",\n      letterCode: 83,\n      sound: \"Open-HH\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n    },\n    {\n      letter: \"D\",\n      letterCode: 68,\n      sound: \"Closed-HH\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\n    },\n    {\n      letter: \"Z\",\n      letterCode: 90,\n      sound: \"Shaker\",\n      sampleURL:\n        \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\n    },\n    {\n      letter: \"X\",\n      letterCode: 88,\n      sound: \"Piano-Chord\",\n      sampleURL: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\n    },\n    {\n      letter: \"C\",\n      letterCode: 67,\n      sound: \"Horse\",\n      sampleURL: \"https://www.w3schools.com/html/horse.ogg\",\n    },\n  ];\n\n  export default data;","import React from 'react';\nimport data from './data';\n\n// drum-pad template rendered 9 times with data mapped from the data array\nconst DrumPad = ({ clickEvent }) => {\n    return (\n      <div id=\"drum-pad-container\">\n        {data.map((x) => {\n          return (\n            <button className=\"drum-pad\" id={x.sound} onClick={clickEvent} key={x.sound}>\n              <audio className=\"clip\" id={x.letter} src={x.sampleURL}></audio>\n              <h2 id=\"drum-pad-text\">{x.letter}</h2>\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  export default DrumPad;","import React, { useState, useEffect } from \"react\";\nimport DrumPad from './DrumPad';\nimport \"./App.css\";\n\nconst App = () => {\n  //setting state for display text\n  const [text, setText] = useState(\"<<Play Drum>>\");\n\n  //handling key press\n  const keyPressHandler = (e) => {\n    let keyPressed = String.fromCharCode(e.keyCode);\n    let audio = document.getElementById(keyPressed);\n    if (audio === null) {\n      return;\n    }\n    let playAudio = () => {\n      audio.play();\n    };\n    playAudio();\n    let sound = audio.parentElement.id;\n    setText(sound);\n    let padPressed = audio.parentElement;\n    padPressed.classList.add(\"active\");\n    setTimeout(()=>{\n      padPressed.classList.remove(\"active\");\n    }, 100)\n  };\n\n  //listening for key press\n  useEffect(() => {\n    document.addEventListener(\"keydown\", keyPressHandler);\n    return () => {\n      document.removeEventListener(\"keydown\", keyPressHandler);\n    };\n  }, []);\n\n  //handling mouse click on a pad\n  const handleClick = (e) => {\n    let id = e.target.id;\n    let targetButton = document.getElementById(id);\n    if (targetButton === null) {\n      return;\n    }\n    let audio = targetButton.firstChild;\n    let playAudio = () => {\n      audio.play();\n    };\n    playAudio();\n    setText(id);\n  };\n\n  return (\n    <div id=\"container\">\n      <div id=\"drum-machine\">\n        <h4 id=\"heading\">\n          <span role=\"img\" aria-label=\"drum emoji\">ü•Å</span>FreeCodeCamp<span role=\"img\" aria-label=\"drum emoji\">ü•Å</span>\n        </h4>\n        <div id=\"display\">\n          <h1 id=\"text\">{text}</h1>\n        </div>\n        <DrumPad clickEvent={handleClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}